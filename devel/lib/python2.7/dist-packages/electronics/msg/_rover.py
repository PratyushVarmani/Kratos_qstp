# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from electronics/rover.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import genpy
import std_msgs.msg

class rover(genpy.Message):
  _md5sum = "88cdce70f8f92a71fa841fa7b7186ec4"
  _type = "electronics/rover"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """geometry_msgs/Twist velocity
std_msgs/Float64 distance
geometry_msgs/Pose position
std_msgs/Int32 battery
std_msgs/Time time_running



================================================================================
MSG: geometry_msgs/Twist
# This expresses velocity in free space broken into its linear and angular parts.
Vector3  linear
Vector3  angular

================================================================================
MSG: geometry_msgs/Vector3
# This represents a vector in free space. 
# It is only meant to represent a direction. Therefore, it does not
# make sense to apply a translation to it (e.g., when applying a 
# generic rigid transformation to a Vector3, tf2 will only apply the
# rotation). If you want your data to be translatable too, use the
# geometry_msgs/Point message instead.

float64 x
float64 y
float64 z
================================================================================
MSG: std_msgs/Float64
float64 data
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of position and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

================================================================================
MSG: std_msgs/Int32
int32 data
================================================================================
MSG: std_msgs/Time
time data
"""
  __slots__ = ['velocity','distance','position','battery','time_running']
  _slot_types = ['geometry_msgs/Twist','std_msgs/Float64','geometry_msgs/Pose','std_msgs/Int32','std_msgs/Time']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       velocity,distance,position,battery,time_running

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(rover, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.distance is None:
        self.distance = std_msgs.msg.Float64()
      if self.position is None:
        self.position = geometry_msgs.msg.Pose()
      if self.battery is None:
        self.battery = std_msgs.msg.Int32()
      if self.time_running is None:
        self.time_running = std_msgs.msg.Time()
    else:
      self.velocity = geometry_msgs.msg.Twist()
      self.distance = std_msgs.msg.Float64()
      self.position = geometry_msgs.msg.Pose()
      self.battery = std_msgs.msg.Int32()
      self.time_running = std_msgs.msg.Time()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_14di2I().pack(_x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.distance.data, _x.position.position.x, _x.position.position.y, _x.position.position.z, _x.position.orientation.x, _x.position.orientation.y, _x.position.orientation.z, _x.position.orientation.w, _x.battery.data, _x.time_running.data.secs, _x.time_running.data.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.distance is None:
        self.distance = std_msgs.msg.Float64()
      if self.position is None:
        self.position = geometry_msgs.msg.Pose()
      if self.battery is None:
        self.battery = std_msgs.msg.Int32()
      if self.time_running is None:
        self.time_running = std_msgs.msg.Time()
      end = 0
      _x = self
      start = end
      end += 124
      (_x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.distance.data, _x.position.position.x, _x.position.position.y, _x.position.position.z, _x.position.orientation.x, _x.position.orientation.y, _x.position.orientation.z, _x.position.orientation.w, _x.battery.data, _x.time_running.data.secs, _x.time_running.data.nsecs,) = _get_struct_14di2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_14di2I().pack(_x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.distance.data, _x.position.position.x, _x.position.position.y, _x.position.position.z, _x.position.orientation.x, _x.position.orientation.y, _x.position.orientation.z, _x.position.orientation.w, _x.battery.data, _x.time_running.data.secs, _x.time_running.data.nsecs))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.velocity is None:
        self.velocity = geometry_msgs.msg.Twist()
      if self.distance is None:
        self.distance = std_msgs.msg.Float64()
      if self.position is None:
        self.position = geometry_msgs.msg.Pose()
      if self.battery is None:
        self.battery = std_msgs.msg.Int32()
      if self.time_running is None:
        self.time_running = std_msgs.msg.Time()
      end = 0
      _x = self
      start = end
      end += 124
      (_x.velocity.linear.x, _x.velocity.linear.y, _x.velocity.linear.z, _x.velocity.angular.x, _x.velocity.angular.y, _x.velocity.angular.z, _x.distance.data, _x.position.position.x, _x.position.position.y, _x.position.position.z, _x.position.orientation.x, _x.position.orientation.y, _x.position.orientation.z, _x.position.orientation.w, _x.battery.data, _x.time_running.data.secs, _x.time_running.data.nsecs,) = _get_struct_14di2I().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_14di2I = None
def _get_struct_14di2I():
    global _struct_14di2I
    if _struct_14di2I is None:
        _struct_14di2I = struct.Struct("<14di2I")
    return _struct_14di2I
